let serial; // variable to hold an instance of the serialport library
let portName = "/dev/tty.usbmodem1422201"; // fill in your serial port name here
let xPos = 0; // x position of the graph
let portSelector;
let inData;

function setup() {
  serial = new p5.SerialPort(); // make a new instance of the serialport library
  serial.on("list", printList); // set a callback function for the serialport list event
  serial.on("connected", serverConnected); // callback for connecting to the server
  serial.on("open", portOpen); // callback for the port opening
  serial.on("data", serialEvent); // callback for when new data arrives
  serial.on("error", serialError); // callback for errors
  serial.on("close", portClose); // callback for the port closing

  serial.list(); // list the serial ports
  serial.open(portName); // open a serial port

  createCanvas(400, 300);
  background(0x08, 0x16, 0x40);
}


// get the list of ports:
function printList(portList) {
  // make a serial port selector object:
  function printList(portList) {
    // create a select object:
    portSelector = createSelect();
    portSelector.position(10, 10);
    // portList is an array of serial port names
    for (var i = 0; i < portList.length; i++) {
      // add this port name to the select object:
      portSelector.option(portList[i]);
    }
    // set an event listener for when the port is changed:
    portSelector.changed(mySelectEvent);
  }
}

function serverConnected() {
  console.log("connected to server.");
}

function portOpen() {
  console.log("the serial port opened.");
}

function serialEvent() {
  inData = Number(serial.read());
}

function serialError(err) {
  console.log("Something went wrong with the serial port. " + err);
}

function portClose() {
  console.log("The serial port closed.");
}

function mySelectEvent() {
  let item = portSelector.value();// if there's a port open, close it:
  if (serial.serialport != null) {
    serial.close();
  }
  // open the new port:
  serial.open(item);
}
function graphData(newData) {
  // map the range of the input to the window height:
  var yPos = map(newData, 0, 255, 0, height);
  // draw the line in a pretty color:
  stroke(0xa8, 0xd9, 0xa7);
  line(xPos, height, xPos, height - yPos);
  // at the edge of the screen, go back to the beginning:
  if (xPos >= width) {
    xPos = 0;
    // clear the screen by resetting the background:
    background(0x08, 0x16, 0x40);
  } else {
    // increment the horizontal position for the next reading:
    xPos++;
  }
}
function draw() {
 background(0);
   fill(255);
   text("sensor value: " + inData, 30, 50);

}
